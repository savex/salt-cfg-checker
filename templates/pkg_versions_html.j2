<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cloud Package versions check</title>
    <style>
        body {
            font-family: "Open Sans", Arial, Helvetica, sans-serif;
            font-size: 90% !important;
        }
        h5 {padding-left: 1em; margin: 0.6em}
        .note {font-style: italic; font-weight: normal; padding-left: 1em; margin: 0.2em; font-size: 0.7em; color: gray;}
		/* Common */
		.header {
			display:block;
		}
		.main_content {
			content: "";
			display: table;
			clear: both;
		}
		
		.label {float: left; font-size: 0.7em; color: Black; line-height: 17px; padding-left: 10px;}
        .text {float: left; font-size: 0.8em; color: Navy; padding-left: 2px;}
        
        .repo {width: 3em; text-align: center; font-size: 0.7em; color: #113b11; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}
        .component, td.app, td.package_name {
            font-size: 0.75em;
            text-align: center;
            color: #113b11;
            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        }
        
        .package_name {
            padding-left: 10px;
            text-align: left;
        }
        td.repo {column-width: 50px;}
        td.component {column-width: 130px;}
        td.app {column-width: 80px;}
        td.package_name {column-width: 200px;}
        td.installed {column-width: 16%;}
        td.candidate {column-width: 16%;}
        td.release {column-width: 13%;}

        .status_container {
            display: inline-block;
        }

        .status {
            display: block;
            float: left;
            padding: 1px;
            padding-left: 5px;
            padding-right: 5px;
            color: white;
            background-color: #113b11;
            text-align: center;
        }
        .action {
            display: block;
            float: left;
            padding: 1px;
            padding-left: 5px;
            padding-right: 5px;
            color: gray;
            background-color: #d4dad9;
            text-align: center;
        }

        .status_container .ok {
            color: white;
            background-color: #113b11;
        }
        .status_container .error {
            color: white;
            background-color: darkred;
        }
        .status_container .upgraded {
            color: darkgreen;
            background-color: lightgreen;
        }
        .status_container .downgraded {
            color: white;
            background-color: darkolivegreen;
        }

        .version {text-align: left; padding: 2px}
        .v_epoch, .v_upstream, .v_debian, .colon, .dash {
            color: darkslategray;
            font-family: monospace;
            float: left;
            display: block;
        }

        .ok {color: darkslategray;}
        .error {color: white; background-color: darkred;}
        .upgraded {color: green; font-weight: bold;}
        .downgraded {color: red;}
		
		
        /* Report specific styles */
        .dot_green {float: left; color: green; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_red {float: left; color: red; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_empty {float: left; color: darkgray; margin-right: 0.5em; margin-top: 0.2em;}

        .smallgreytext {float: right; font-size: 0.5em; color: gray;}

		/* Bar */
		.bar{
			background: linear-gradient(to bottom, #126666 0%, #284753 77%);
			width:100%;
			overflow:hidden;
			display: inline-block;
		}
		.bar .bar-item{
			padding:8px 16px;
			float:left;
			width:auto;
			border:none;
			display:block;
			outline:0;
            color: White;
            background-color: transparent;
        }
        
        .bar .bar-item:hover {
            background-color: #328686;
        }
        
        .bar .bar-item.active {
            background-color: #328686;
            color: white;
        }

        button > div.node_name {
            float: left;
            font-size: 0.8em;
        }


        .collapsable {
            visibility: collapse;
            display: none;
        }

        .collapsable.in {
            visibility: visible;
            display: table-row;
        }

        table {
            border: 0 hidden;
            width: 100%;
        }
        .nodes tr:nth-child(even) {
            background-color: #fff;
        }
        .nodes tr:nth-child(odd) {
            background-color: #d4dad9;
            
        }
        .table_header {
            background-color: #284753;
            color: wheat;
            text-align: center;
            font-family: "Open Sans", Arial, Helvetica, sans-serif;
        }

        /* Tooltip container */
        .tooltip {
            position: relative;
            display: inline-block;
            border-bottom: 1px dotted black;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            background-color: black;
            font-family: "Lucida Console", Monaco, monospace;
            font-size: 0.5em;
            width: auto;
            color: #fff;
            border-radius: 6px;
            padding: 5px 5px;

            /* Position the tooltip */
            position: absolute;
            z-index: 1;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }

    </style>
    <script language="JavaScript">
        function toggleClassByID(pkg) {
            var element = document.getElementById(pkg);
            //var button = document.getElementById(pkg+"_button");

            if( element.className && element.className.indexOf("in") > -1 ) {
                element.classList.remove("in");
                //button.innerHTML = "&uarr;"
            }
            else {
                element.classList.add("in");
                //button.innerHTML = "&darr;"
            }
        }
    </script>
    <script language="JavaScript">
        function init() {
            // Declare all variables
            var i, content, items;

            // Get all elements with class="barcontent" and hide them
            content = document.getElementsByClassName("barcontent");
            for (i = 1; i < content.length; i++) {
                content[i].style.display = "none";
            }
            content[0].style.display = "block";

            // Get all elements with class="bar-item" and remove the class "active"
            items = document.getElementsByClassName("bar-item");
            for (i = 1; i < items.length; i++) {
                items[i].className = items[i].className.replace(" active", "");
            }
            items[0].className += " active";

        }
        function openBar(evt, barName) {
            // Declare all variables
            var i, barcontent, baritems;

            // Get all elements with class="barcontent" and hide them
            barcontent = document.getElementsByClassName("barcontent");
            for (i = 0; i < barcontent.length; i++) {
                barcontent[i].style.display = "none";
            }

            // Get all elements with class="bar-item" and remove the class "active"
            baritems = document.getElementsByClassName("bar-item");
            for (i = 0; i < baritems.length; i++) {
                baritems[i].className = baritems[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the link that opened the tab
            document.getElementById(barName).style.display = "block";
            evt.currentTarget.className += " active";
        }

    </script>
</head>
<body onload="init()">

<div class="header">
	<div class="label">OpenStack release:</div>
	<div class="text">{{ openstack_release }}</div>
	<div class="label">MCP Version:</div>
	<div class="text">{{ mcp_release }}</div>
</div>

<div class="bar">
	<button class="bar-item" onclick="openBar(event, 'mirantis')">Mirantis</button>
	<button class="bar-item" onclick="openBar(event, 'system')">System</button>
    <button class="bar-item" onclick="openBar(event, 'other')">Other</button>
    <button class="bar-item" onclick="openBar(event, 'unlisted')">Unlisted</button>
</div>

{% macro prettify_version(v) %}
    <div class="version">
        {% if v.epoch %}
        <div class="v_epoch {{ v.epoch_status | make_status_label }}">{{ v.epoch }}</div>
        <div class="colon">:</div>
        {% endif %}
        <div class="v_upstream {{ v.upstream_status | make_status_label }}">{{ v.upstream }}{{ v.upstream_rev }}</div>
        {% if v.debian %}
        <div class="dash">-</div>
        <div class="v_debian {{ v.debian_status | make_status_label }}">{{ v.debian }}{{ v.debian_rev }}</div>
        {% endif %}
        {{ caller() }}
    </div>
{% endmacro %}

{% macro render_package(pkg_name, dat, status_shown, action_shown, id_label) %}
        <tr onclick="toggleClassByID('{{ id_label }}_{{ pkg_name }}_{{ status_shown }}_{{ action_shown }}')" id="{{ id_label }}_{{ pkg_name }}_{{ status_shown }}_{{ action_shown }}_button">
            <td class="repo">{{ dat['desc']['repo'] }}</td>
            <td class="component">{{ dat['desc']['component'] }}</td>
            <td class="app">{{ dat['desc']['app'] }}</td>
            <td class="package_name">{{ pkg_name }}</td>
            <td class="status_container" colspan="3">
                <div class="status {{ status_shown | make_status_label }}">{{ status_shown | make_status_label }}</div>
                {% if action_shown | make_action_label %}
                    <div class="action">{{ action_shown | make_action_label }}</div>
                {% endif %}
            </td>
        </tr>
        <tr class="collapsable" id="{{ id_label }}_{{ pkg_name }}_{{ status_shown }}_{{ action_shown }}"><td colspan=7>
            <table class="nodes"><tbody>
                {% for status in dat['results'].keys() | sort(reverse=true) %}
                {% for action in dat['results'][status].keys() | sort(reverse=true) %}
                {% set counter = 1 + loop.index0 %}
                {% for node in dat['results'][status][action].keys() | sort %}
                {% set n_counter = 1 + loop.index0 %}
                {% set nd = dat['results'][status][action][node] %}
                <tr>
                    <td class="repo">{{ n_counter }}</td>
                    <td class="package_name" colspan="2">{{ node }}</td>
                    <td class="status_container">
                        <div class="status {{ status | make_status_label }}">{{ status | make_status_label }}</div>
                        {% if action | make_action_label %}
                            <div class="action">{{ action | make_action_label }}</div>
                        {% endif %}
                    </td>
                    <td class="installed">
                        <div class="tooltip">
                            {% call prettify_version(nd['i']) %}
                            <pre class="tooltiptext">{{ nd['raw'] | linebreaks }}</pre>
                            {% endcall %}
                        </div>
                    </td>
                    <td class="candidate">{{ nd['c'].version }}</td>
                    <td class="release">{{ dat['r'].version }}</td>
                </tr>
                {% endfor %}
                {% endfor %}
                {% endfor %}
            </tbody></table>
        </td></tr>
    {{ caller() }}
{% endmacro %}

{% macro package_table(pkg_dict, id_label) %}
<div id="{{ id_label }}" class="barcontent">
    <h5>{{ caller() }}</h5>
    <table class="pkgversions">
            <tbody>
            <tr>
                <td class="table_header repo" width="50px">repo</td>
                <td class="table_header component" width="130px">Component</td>
                <td class="table_header app" width="80px">App</td>
                <td class="table_header package_name" width="200px">Package name</td>
                <td class="table_header installed">Installed</td>
                <td class="table_header candidate">Candidate</td>
                <td class="table_header release">Release</td>
            </tr>
            <!-- Print errors -->
            <tr><td colspan="7">Errors ({{ errors[id_label] }})</td></tr>
            {% for pkg_name in pkg_dict | get_sorted_keys %}
            {% set dat = pkg_dict[pkg_name] %}
                {% if status_err in dat['results'] %}
                    {% set action_to_show = dat['results'][status_err].keys() | get_max %}
                    {% call render_package(pkg_name, dat, status_err, action_to_show, id_label) %}
                    {% endcall %}
                {% endif%}
            {% endfor %}
            {% if not errors[id_label] %}
            <tr><td class="note" colspan="7">no errors found </td></tr>
            {% endif %}

            <!-- Print downgrades -->
            <tr><td colspan="7">Downgrades ({{ downgrades[id_label] }})</td></tr>
            {% for pkg_name in pkg_dict | get_sorted_keys %}
            {% set dat = pkg_dict[pkg_name] %}
                {% if status_down in dat['results'] %}
                    {% set action_to_show = dat['results'][status_down].keys() | get_max %}
                    {% call render_package(pkg_name, dat, status_down, action_to_show, id_label) %}
                    {% endcall %}
                {% endif %}
            {% endfor %}
            {% if not downgrades[id_label] %}
            <tr><td class="note" colspan="7">no downgrades found</td></tr>
            {% endif %}

            <!-- Print all other -->
            <tr><td colspan="7">All others</td></tr>
            {% for pkg_name in pkg_dict | get_sorted_keys %}
            {% set dat = pkg_dict[pkg_name] %}
                {% set status_to_show = dat['results'].keys() | get_max %}
                {% set action_to_show = dat['results'][status_to_show].keys() | get_max %}
                {% if status_err != status_to_show and status_down !=  status_to_show %}
                    {% call render_package(pkg_name, dat, status_to_show, action_to_show, id_label) %}
                    {% endcall %}
                {% endif %}
            {% endfor %}
            </tbody>
        </table>
</div>
{%- endmacro %}

<!-- Mirantis packages which version is critical for functionality -->
{% call package_table(critical, "mirantis") %}
    Packages maintained and updated by Mirantis
{% endcall %}

<!-- System labeled packages-->
{% call package_table(system, "system") %}
    System packages which versions are critical to proper cloud function
{%- endcall %}

<!-- Other packages -->
{% call package_table(other, "other") %}
    Packages with no description or not critical
{%- endcall %}

{% call package_table(unlisted, "unlisted") %}
    Packages that are not listed in version map. I.e. unexpected on the environment
{%- endcall %}
       
</body>
</html>