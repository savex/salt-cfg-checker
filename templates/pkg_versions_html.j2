<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cloud Package versions check</title>
    <style>
        body {
            font-family: "Open Sans", Arial, Helvetica, sans-serif;
            font-size: 90% !important;
        }
        h5 {padding-left: 1em; margin: 0.6em}
		/* Common */
		.header {
			display:block;
		}
		.main_content {
			content: "";
			display: table;
			clear: both;
		}
		
		.label {float: left; font-size: 0.7em; color: Black; line-height: 17px; padding-left: 10px;}
        .text {float: left; font-size: 0.8em; color: Navy; padding-left: 2px;}
        
        .repo {width: 3em; text-align: center; font-size: 0.7em; color: #113b11; font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif}
        .component, .app, .package_name {
            font-size: 0.75em;
            text-align: center;
            color: #113b11;
            font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
        }
        
        .package_name {
            padding-left: 10px;
            text-align: left;
        }

        .version {font-size: 0.8em; text-align: left; padding: 2px}
        .v_epoch, .v_major, .v_debian, .colon, .dash {
            font-size: 0.7em;
            color: darkslategray;
            font-family: monospace;
            float: left;
            display: block;
        }

        .error {color: white; background-color: darkred}
        .upgrade {color: green;}
        .downghrade {color: red;}
		
		
        /* Report specific styles */
        .dot_green {float: left; color: green; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_red {float: left; color: red; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_empty {float: left; color: darkgray; margin-right: 0.5em; margin-top: 0.2em;}

        .smallgreytext {float: right; font-size: 0.5em; color: gray;}

		/* Bar */
		.bar{
			background: linear-gradient(to bottom, #126666 0%, #284753 77%);
			width:100%;
			overflow:hidden;
			display: inline-block;
		}
		.bar .bar-item{
			padding:8px 16px;
			float:left;
			width:auto;
			border:none;
			display:block;
			outline:0;
            color: White;
            background-color: transparent;
        }
        
        .bar .bar-item:hover {
            background-color: #328686;
        }
        
        .bar .bar-item.active {
            background-color: #328686;
            color: white;
        }


        /* Tab styles */
        .tab {
            float: left;
            width: 130px;
            border: 1px solid #fff;
            background-color: #e0f0e9;
        }

        /* Style the buttons that are used to open the tab content */
        .tab button {
            display: block;
            background-color: inherit;
            color: Black;
            border: none;
            outline: none;
            font-family: "Lucida Console", Monaco, monospace;
            text-align: left;
            cursor: pointer;
            transition: 0.3s;
            font-size: 1.1em;
            width: 100%;
            padding: 1px;
            margin: 1px;
        }

        button > div.node_name {
            float: left;
            font-size: 0.8em;
        }


        /* Change background color of buttons on hover */
        .tab button:hover {
            background-color: #72c6c6;
        }

        /* Create an active/current "tab button" class */
        .tab button.active {
            background-color: #328686;
            color: white;
        }

        /* Style the tab content */
        .tabcontent {
            display: none;
            position: absolute;
            font-size: 1em;
            padding: 0.5em;
            right: -10%;
            top: 55px;
            transform: translateX(-12%);
            width: calc(100% - 170px);
            overflow-x: scroll;
            overflow-wrap: break-word;
        }
        .collapsable {
            visibility: collapse;
            display: none;
        }

        .collapsable.in {
            visibility: visible;
            display: table-row;
        }

        table {
            border: 0 hidden;
            width: 100%;
        }
        tr:nth-child(even) {
            background-color: #fff;
        }
        tr:nth-child(odd) {
            background-color: #d4dad9;
            
        }
        .table_header {
            background-color: #284753;
            color: wheat;
            text-align: center;
            font-family: "Open Sans", Arial, Helvetica, sans-serif;
        }

        /* Tooltip container */
        .tooltip {
            position: relative;
            display: inline-block;
            border-bottom: 1px dotted black;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            background-color: black;
            font-family: "Lucida Console", Monaco, monospace;
            font-size: 0.5em;
            width: auto;
            color: #fff;
            border-radius: 6px;
            padding: 5px 5px;

            /* Position the tooltip */
            position: absolute;
            z-index: 1;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }

    </style>
    <script language="JavaScript">
        function toggleClassByID(pkg, number) {
            var elements = document.querySelectorAll("#"+pkg+"_"+number);
            var ii = elements.length;
            //var button = document.querySelector("#"+pkg+"_button"+number);

            while (ii--) {
                if( elements[ii].className && elements[ii].className.indexOf("in") > -1 ) {
                    elements[ii].classList.remove("in");
                    //button.innerHTML = "&uarr;"
                }
                else {
                    elements[ii].classList.add("in");
                    //button.innerHTML = "&darr;"
                }
            }


        }
    </script>
    <script language="JavaScript">
        function init() {
            // Declare all variables
            var i, content, items;

            // Get all elements with class="tabcontent" and hide them
            content = document.getElementsByClassName("barcontent");
            for (i = 1; i < content.length; i++) {
                content[i].style.display = "none";
            }
            content[0].style.display = "block";

            content = document.getElementsByClassName("tabcontent");
            for (i = 1; i < content.length; i++) {
                content[i].style.display = "none";
            }
            content[0].style.display = "block";

            // Get all elements with class="tab-item" and remove the class "active"
            items = document.getElementsByClassName("bar-item");
            for (i = 1; i < items.length; i++) {
                items[i].className = items[i].className.replace(" active", "");
            }
            items[0].className += " active";

            // Get all elements with class="tab-item" and remove the class "active"
            items = document.getElementsByClassName("tab-item");
            for (i = 1; i < items.length; i++) {
                items[i].className = items[i].className.replace(" active", "");
            }
            //items[0].className += " active";

        }
        function openTab(evt, tabName) {
            // Declare all variables
            var i, tabcontent, tabitems;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tab-item" and remove the class "active"
            tabitems = document.getElementsByClassName("tab-item");
            for (i = 0; i < tabitems.length; i++) {
                tabitems[i].className = tabitems[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the link that opened the tab
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
        function openBar(evt, barName) {
            // Declare all variables
            var i, barcontent, baritems;

            // Get all elements with class="barcontent" and hide them
            barcontent = document.getElementsByClassName("barcontent");
            for (i = 0; i < barcontent.length; i++) {
                barcontent[i].style.display = "none";
            }

            // Get all elements with class="bar-item" and remove the class "active"
            baritems = document.getElementsByClassName("bar-item");
            for (i = 0; i < baritems.length; i++) {
                baritems[i].className = baritems[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the link that opened the tab
            document.getElementById(barName).style.display = "block";
            evt.currentTarget.className += " active";
        }

    </script>
</head>
<body onload="init()">

<div class="header">
	<div class="label">OpenStack release:</div>
	<div class="text">{{ openstack_release }}</div>
	<div class="label">MCP Version:</div>
	<div class="text">{{ mcp_release }}</div>
</div>

<div class="bar">
	<button class="bar-item" onclick="openBar(event, 'mirantis')">Mirantis</button>
	<button class="bar-item" onclick="openBar(event, 'system')">System</button>
    <button class="bar-item" onclick="openBar(event, 'other')">Other</button>
    <button class="bar-item" onclick="openBar(event, 'unlisted')">Unlisted</button>
	<button class="bar-item" onclick="openBar(event, 'nodes')">Per Node</button>
</div>

{% macro _version(v, r) %}
    <td class="version">
        <div class="v_epoch {{ r.epoch }}">{{ v.epoch }}</div>
        <div class="colon">:</div>
        <div class="v_major {{ r.major }}">{{ v.major }}</div>
        <div class="dash">-</div>
        <div class="v_debian {{ r.debian }}">{{ v.debian }}</div>
    </td>
{% endmacro %}

{% macro package_table(pkg_dict, id_label) %}
<div id="{{ id_label }}" class="barcontent">
    <h5>{{ caller() }}</h5>
    <table class="pkgversions">
            <tbody>
            <tr>
                <td class="table_header" width="50px">repo</td>
                <td class="table_header" width="130px">Component</td>
                <td class="table_header" width="80px">App</td>
                <td class="table_header" width="200px">Package name</td>
                <td class="table_header">Installed</td>
                <td class="table_header">Candidate</td>
                <td class="table_header">Release</td>
            </tr>
            {% for pkg_name in pkg_dict | get_sorted_keys %}
            {% set dat = pkg_dict[pkg_name] %}
                {% for key in dat['v'].keys() | sort %}
                {% set pkg_counter = 1 + loop.index0 %}
            <tr onclick="toggleClassByID('{{ id_label }}_{{ pkg_name }}', '{{ pkg_counter }}')" id="{{ id_label }}_{{ pkg_name }}_button{{ pkg_counter }}">
                <td class="repo">{{ dat['desc']['repo'] }}</td>
                <td class="component">{{ dat['desc']['component'] }}</td>
                <td class="app">{{ dat['desc']['app'] }}</td>
                <td class="package_name">{{ pkg_name }}</td>
                <td class="version">
                    {{ dat['v'][key]['i'].version }}
                </td>
                <td class="version">{{ dat['v'][key]['c'].version }}</td>
                <td class="version">{{ dat['r'].version }}</td>
            </tr>
            <tr class="collapsable" id="{{ id_label }}_{{ pkg_name }}_{{ pkg_counter }}"><td colspan=7>
            <table class="nodes"><tbody>
                {% for node in dat['v'][key]['results'].keys() | sort %}
                {% set nd = dat['v'][key]['results'][node] %}
                <tr>
                    <td class="repo">-</td>
                    <td class="package_name" colspan="3">{{ node }}</td>
                    <td class="result">{{ nd['result'].status }} ({{ nd['result'].action }})</td>
                    <td class="version">
                        <div class="tooltip">{{ nd['result'].source.version }}
                            <pre class="tooltiptext">{{ nd['raw'] | linebreaks }}</pre>
                        </div>
                    </td>
                    <td class="version">{{ nd['result'].target.version }}</td>
                </tr>
                {% endfor %}
            </tbody></table>
            </td></tr>
                {% endfor %}
            {% endfor %}
            </tbody>
        </table>
</div>
{%- endmacro %}

<!-- Mirantis packages which version is critical for functionality -->
{% call package_table(critical, "mirantis") %}
    Packages maintained and updated by Mirantis
{% endcall %}

<!-- System labeled packages-->
{% call package_table(system, "system") %}
    System packages which versions are critical to proper cloud function
{%- endcall %}

<!-- Other packages -->
{% call package_table(other, "other") %}
    Packages with no description or not critical
{%- endcall %}

<div id="unlisted" class="barcontent">
    <h5>Packages that are not listed in version map. I.e. unexpected on the environment.</h5>
</div>
        
<div id="nodes" class="barcontent">
    <!-- Per node -->
    <div class="tab">
    {% for node_name in nodes.keys() | sort %}
        {% if counters[node_name]['package_diff'] %}
    <button class="tab-item" onclick="openTab(event, '{{ node_name | shortname }}')">
        <div class="dot_green">&#9679;</div>
        <div class="node_name">{{ node_name | shortname }}</div>
        <div class="smallgreytext">({{ counters[node_name]['package_diff'] }} / {{ counters[node_name]['packages'] }})</div>
    </button>
        {% endif %}    
    {% endfor %}
    {% for node_name in nodes.keys() | sort %}
        {% if not counters[node_name]['package_diff'] %}
    <button class="tab-item" onclick="openTab(event, '{{ node_name | shortname }}')">
        <div class="dot_empty">&#9675;</div>
        <div class="node_name">{{ node_name | shortname }}</div>
        <div class="smallgreytext">({{ counters[node_name]['package_diff'] }} / {{ counters[node_name]['packages'] }})</div>
    </button>
        {% endif %}
    {% endfor %}
    </div>
    {% for node_name in nodes.keys() | sort %}
    <div id="{{ node_name | shortname }}" class="tabcontent">
        <table class="pkgversions">
            <tbody>
            <tr>
                <td class="Header">Package name</td>
                <td class="Header">Installed</td>
                <td class="Header">Candidate</td>
            </tr>
            <tr><td colspan=3>Package with different versions uniq for this node</td></tr>
            {% for package_name in nodes[node_name]['packages'] | sort %}
                {% if not nodes[node_name]['packages'][package_name]['is_equal'] %}
                {% if nodes[node_name]['packages'][package_name]['fail_uniq'] %}
            <tr>
                <td class="pkgName">{{ package_name }}</td>
                <td class="version differ">
                    <div class="tooltip">{{ nodes[node_name]['packages'][package_name]['installed'] }}
                        <pre class="tooltiptext">{{ nodes[node_name]['packages'][package_name]['raw'] | linebreaks }}</pre>
                    </div>
                </td>
                <td class="version">{{ nodes[node_name]['packages'][package_name]['candidate'] }}</td>
            </tr>
                {% endif %}
                {% endif %}
            {% endfor %}
            <tr><td colspan=3>Packages with different versions on nodes with similar role</td></tr>
            {% for package_name in nodes[node_name]['packages'] | sort %}
                {% if not nodes[node_name]['packages'][package_name]['is_equal'] %}
                {% if not nodes[node_name]['packages'][package_name]['fail_uniq'] %}
            <tr>
                <td class="pkgName">{{ package_name }}</td>
                <td class="version differ">
                    <div class="tooltip">{{ nodes[node_name]['packages'][package_name]['installed'] }}
                        <pre class="tooltiptext">{{ nodes[node_name]['packages'][package_name]['raw'] | linebreaks }}</pre>
                    </div>
                </td>
                <td class="version">{{ nodes[node_name]['packages'][package_name]['candidate'] }}</td>
            </tr>
                {% endif %}
                {% endif %}
            {% endfor %}
            <tr><td colspan=3>Packages with same versions (installed vs candidate): {{ counters[node_name]['package_eq'] }}</td></tr>
            </tbody>
        </table>
    </div>
    {% endfor %}
</div>
</body>
</html>