<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cloud Package versions check</title>
    <style>
        body {
            font-family: Verdana, Geneva, Tahoma, sans-serif;
            font-size: 90% !important;
        }
		/* Common */
		.header {
			display:block;
		}
		.main_content {
			content: "";
			display: table;
			clear: both;
		}
		
		.label {float: left; font-size: 0.7em; color: Black; line-height: 17px; padding-left: 10px;}
		.text {float: left; font-size: 0.8em; color: Navy; padding-left: 2px;}
		
		
        /* Report specific styles */
        .dot_green {float: left; color: green; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_red {float: left; color: red; margin-right: 0.5em; margin-top: 0.2em;}
        .dot_empty {float: left; color: darkgray; margin-right: 0.5em; margin-top: 0.2em;}

        .smallgreytext {float: right; font-size: 0.5em; color: gray;}

        .pkgName {font-size: 1em; padding-left: 10px;}
        .version {font-size: 1.1em; text-align: left;}
        .differ {background-color: #eaa;}


		/* Bar */
		.bar{
			background: linear-gradient(to bottom, #126666 0%, #284753 77%);
			width:100%;
			overflow:hidden;
			display: inline-block;
		}
		.bar .bar-item{
			padding:8px 16px;
			float:left;
			width:auto;
			border:none;
			display:block;
			outline:0;
            color: White;
            background-color: transparent;
        }
        
        .bar .bar-item:hover {
            background-color: #328686;
        }
        
        .bar .bar-item.active {
            background-color: #328686;
            color: white;
        }


        /* Tab styles */
        .tab {
            float: left;
            width: 130px;
            border: 1px solid #fff;
            background-color: #e0f0e9;
        }

        /* Style the buttons that are used to open the tab content */
        .tab button {
            display: block;
            background-color: inherit;
            color: Black;
            border: none;
            outline: none;
            font-family: "Lucida Console", Monaco, monospace;
            text-align: left;
            cursor: pointer;
            transition: 0.3s;
            font-size: 1.1em;
            width: 100%;
            padding: 1px;
            margin: 1px;
        }

        button > div.node_name {
            float: left;
            font-size: 0.8em;
        }


        /* Change background color of buttons on hover */
        .tab button:hover {
            background-color: #72c6c6;
        }

        /* Create an active/current "tab button" class */
        .tab button.active {
            background-color: #328686;
            color: white;
        }

        /* Style the tab content */
        .tabcontent {
            display: none;
            position: absolute;
            font-size: 1em;
            padding: 0.5em;
            right: -10%;
            top: 55px;
            transform: translateX(-12%);
            width: calc(100% - 170px);
            overflow-x: scroll;
            overflow-wrap: break-word;
        }
        .collapsable {
            visibility: collapse;
            display: none;
        }

        .collapsable.in {
            visibility: visible;
            display: table-row;
        }

        table {
            border: 0 hidden;
            width: 100%;
        }
        tr:nth-child(even) {
            background-color: #fff;
        }
        tr:nth-child(odd) {
            background-color: #ddd;
            
        }
        .table_header {
            background-color: #bbb;
            color: Black;
            width: 30%;
            text-align: center;
        }

        /* Tooltip container */
        .tooltip {
            position: relative;
            display: inline-block;
            border-bottom: 1px dotted black;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            background-color: black;
            font-family: "Lucida Console", Monaco, monospace;
            font-size: 0.5em;
            width: auto;
            color: #fff;
            border-radius: 6px;
            padding: 5px 5px;

            /* Position the tooltip */
            position: absolute;
            z-index: 1;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }

    </style>
    <script language="JavaScript">
        function toggleClassByID(pkg, number) {
            var elements = document.querySelectorAll("#"+pkg+"_"+number);
            var ii = elements.length;
            var button = document.querySelector("#"+pkg+"_button"+number);

            while (ii--) {
                if( elements[ii].className && elements[ii].className.indexOf("in") > -1 ) {
                    elements[ii].classList.remove("in");
                    button.innerHTML = "&uarr;"
                }
                else {
                    elements[ii].classList.add("in");
                    button.innerHTML = "&darr;"
                }
            }


        }
    </script>
    <script language="JavaScript">
        function init() {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 1; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tabcontent[0].style.display = "block";

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 1; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            tablinks[0].className += " active";

        }
        function openTab(evt, tabName) {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the link that opened the tab
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
        function openBar(evt, barName) {
            // Declare all variables
            var i, barcontent, baritems;

            // Get all elements with class="tabcontent" and hide them
            barcontent = document.getElementsByClassName("barcontent");
            for (i = 0; i < barcontent.length; i++) {
                barcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            baritems = document.getElementsByClassName("bar-item");
            for (i = 0; i < baritems.length; i++) {
                baritems[i].className = baritems[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the link that opened the tab
            document.getElementById(barName).style.display = "block";
            evt.currentTarget.className += " active";
        }

    </script>
</head>
<body onload="init()">

<div class="header">
	<div class="label">OpenStack release:</div>
	<div class="text">Queens</div>
	<div class="label">MCP Version:</div>
	<div class="text">2018.11.0</div>
</div>

<div class="bar">
	<button class="bar-item" onclick="openBar(event, 'critical')">Critical</button>
	<button class="bar-item" onclick="openBar(event, 'system')">System</button>
	<button class="bar-item" onclick="openBar(event, 'nodes')">Per Node</button>
</div>

<!-- Critical -->
<div id="critical" class="barcontent">
    <table class="pkgversions">
        <tbody>
        <tr>
            <td class="Header">Node name</td>
            <td class="Header">Installed</td>
            <td class="Header">Candidate</td>
        </tr>
        {% for pkg_name in pkg_diffs.keys() | sort %}
        {% if counters[pkg_name]['df_nodes'] %}
        {% set pkg_counter = 1 + loop.index0 %}
        <tr>
            <td>
            <a href="#" onclick="toggleClassByID('{{ pkg_name }}', '{{ pkg_counter }}')" id="{{ pkg_name }}_button{{ pkg_counter }}">&uarr;</a>
            {{ pkg_name }}
            </td>
            <td>{{ counters[pkg_name]['df_nodes'] }}</td>
            <td></td>
        </tr>
        <tr><td colspan=3>
        <table class="nodes"><tbody>
            {% for node in pkg_diffs[pkg_name]['df_nodes'].keys() | sort %}
            <tr class="collapsable" id="{{ pkg_name }}_{{ pkg_counter }}">
                <td class="pkgName">{{ node }}</td>
                <td class="version differ">
                    <div class="tooltip">{{ pkg_diffs[pkg_name]['df_nodes'][node]['i'] }}
                        <pre class="tooltiptext">{{ pkg_diffs[pkg_name]['df_nodes'][node]['raw'] | linebreaks }}</pre>
                    </div>
                </td>
                <td class="version">{{ pkg_diffs[pkg_name]['df_nodes'][node]['c'] }}</td>
            </tr>
            {% endfor %}
        </tbody></table>
        </td></tr>
        {% endif%}
        {% endfor %}
        </tbody>
    </table>
</div>

<div id="system" class="barcontent">
    System packages
</div>

<div id="nodes" class="barcontent">
    <!-- Per node -->
    <div class="tab">
    {% for node_name in nodes.keys() | sort %}
        {% if counters[node_name]['package_diff'] %}
    <button class="tablinks" onclick="openTab(event, '{{ node_name | shortname }}')">
        <div class="dot_green">&#9679;</div>
        <div class="node_name">{{ node_name | shortname }}</div>
        <div class="smallgreytext">({{ counters[node_name]['package_diff'] }} / {{ counters[node_name]['packages'] }})</div>
    </button>
        {% endif %}    
    {% endfor %}
    {% for node_name in nodes.keys() | sort %}
        {% if not counters[node_name]['package_diff'] %}
    <button class="tablinks" onclick="openTab(event, '{{ node_name | shortname }}')">
        <div class="dot_empty">&#9675;</div>
        <div class="node_name">{{ node_name | shortname }}</div>
        <div class="smallgreytext">({{ counters[node_name]['package_diff'] }} / {{ counters[node_name]['packages'] }})</div>
    </button>
        {% endif %}
    {% endfor %}
    </div>
    {% for node_name in nodes.keys() | sort %}
    <div id="{{ node_name | shortname }}" class="tabcontent">
        <table class="pkgversions">
            <tbody>
            <tr>
                <td class="Header">Package name</td>
                <td class="Header">Installed</td>
                <td class="Header">Candidate</td>
            </tr>
            <tr><td colspan=3>Package with different versions uniq for this node</td></tr>
            {% for package_name in nodes[node_name]['packages'] | sort %}
                {% if not nodes[node_name]['packages'][package_name]['is_equal'] %}
                {% if nodes[node_name]['packages'][package_name]['fail_uniq'] %}
            <tr>
                <td class="pkgName">{{ package_name }}</td>
                <td class="version differ">
                    <div class="tooltip">{{ nodes[node_name]['packages'][package_name]['installed'] }}
                        <pre class="tooltiptext">{{ nodes[node_name]['packages'][package_name]['raw'] | linebreaks }}</pre>
                    </div>
                </td>
                <td class="version">{{ nodes[node_name]['packages'][package_name]['candidate'] }}</td>
            </tr>
                {% endif %}
                {% endif %}
            {% endfor %}
            <tr><td colspan=3>Packages with different versions on nodes with similar role</td></tr>
            {% for package_name in nodes[node_name]['packages'] | sort %}
                {% if not nodes[node_name]['packages'][package_name]['is_equal'] %}
                {% if not nodes[node_name]['packages'][package_name]['fail_uniq'] %}
            <tr>
                <td class="pkgName">{{ package_name }}</td>
                <td class="version differ">
                    <div class="tooltip">{{ nodes[node_name]['packages'][package_name]['installed'] }}
                        <pre class="tooltiptext">{{ nodes[node_name]['packages'][package_name]['raw'] | linebreaks }}</pre>
                    </div>
                </td>
                <td class="version">{{ nodes[node_name]['packages'][package_name]['candidate'] }}</td>
            </tr>
                {% endif %}
                {% endif %}
            {% endfor %}
            <tr><td colspan=3>Packages with same versions (installed vs candidate): {{ counters[node_name]['package_eq'] }}</td></tr>
            </tbody>
        </table>
    </div>
    {% endfor %}
</div>
</body>
</html>